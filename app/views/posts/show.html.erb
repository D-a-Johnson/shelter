<div class="container-fluid page-comments">
  <div class="row">
    <div class="col-sm-12 col-sm-offset-3">
      <div class="chat-header py-3"><h3><%= @post.title %></h3></div>
      <div class="post-info mt-3 pl-3 pr-2 pt-1 pb-1">
        <div class="upvote d-flex justify-content-between">
          <div class="post-user d-flex align-items-left">
            <%= cl_image_tag @post.user.avatar, class: "avatar" %>
            <h5 class="ml-2 mt-3"><%= @post.user.first_name.upcase %> <%= @post.user.last_name.upcase %></h5>
          </div>
          <i onclick="likeFunction(this)" class="fas fa-thumbs-up fa-2x mt-3 mr-3"></i>
          <script>
            function likeFunction(x) {
              x.classList.toggle("green");
            }
          </script>
        </div>
        <div class="mt-2 mb-2 post-description">
          <p><%= @post.description %></p>
          <div class="d-flex justify-content-between">
            <p><strong>Posted:</strong> <%= @post.created_at %></p>
            <% if @post.user == current_user %>
              <%= link_to raw("<i class='fas fa-trash-alt mr-2'></i>"), post_path,
            data: {:confirm => 'Are you sure you want to delete this post?'}, :method => :delete  %>
            <% end %>
          </div>
        </div>
      </div>
      <div class="comment-area">
        <div class="mt-3 comments">
          <% @post.comments.each do |comment| %>
            <%= render "comments/comment", comment: comment, user_is_comments_author: comment.user == current_user %>
          <% end %>
        </div>
        <div id="create-comment">
          <%= simple_form_for [ @post, Comment.new ], remote: true, html: {id: :comment_form } do |f| %>
            <%= f.input :content, label: false, class: "comment-input" %>
            <%= f.submit :SUBMIT, class: "btn btn-dark cmtarea mt-1" %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
<% content_for :after_js do %>
  <script>
    const comments = document.querySelectorAll('.comment')
    const lastComment = comments[comments.length - 1]
    lastComment.scrollIntoView();

    App['post_<%= @post.id %>'] = App.cable.subscriptions.create({ channel: 'PostsChannel', post_id: <%= @post.id %>}, {
      received: (data) => {
        <% if user_signed_in? %>
          if (data.current_user_id !== <%= current_user.id %>){
            const commentsContainer = document.querySelector('.comments');
            commentsContainer.insertAdjacentHTML('beforeend', data.comment_partial)
            const comments = document.querySelectorAll('.comment')
            const lastComment = comments[comments.length - 1]
            lastComment.scrollIntoView();
          }
      <% end %>
    }
  }
  )
  </script>
<% end %>

